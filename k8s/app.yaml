apiVersion: v1
kind: Namespace
metadata:
  name: chat
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ahoy-chat
  namespace: chat
spec:
  selector:
    matchLabels:
      app: ahoy-chat
  template:
    metadata:
      labels:
        app: ahoy-chat
    spec:
      containers:
        - name: chat
          image: ttl.sh/atoeshuid9aedeez2au5shee9im2woogah4eeghoishae4eeleewah2oaxook4ad:1h
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: REDIS_URL
              value: redis://redis:6379
            - name: PORT
              value: "8080"
          ports:
            - containerPort: 8080
              name: chat
---
apiVersion: v1
kind: Service
metadata:
  name: ahoy-chat
  namespace: chat
spec:
  selector:
    app: ahoy-chat
  ports:
    - protocol: TCP
      port: 80
      targetPort: chat
      name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ahoy-chat
  namespace: chat
  annotations:
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt

    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - talk.ahoy.wiseflow.io
      secretName: chat-tls
  rules:
    - host: talk.ahoy.wiseflow.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ahoy-chat
                port:
                  name: http
---
# Persistent volume claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: chat
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp3
---
# Redis deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: chat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7.0.4-alpine
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
          resources:
            requests:
              cpu: "3"
              memory: 1Gi
            limits:
              cpu: "3"
              memory: 1Gi
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
---
# Redis loadbalancer service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: chat
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
  selector:
    app: redis
